enchant();

/*
 * 調整・編集用グルーバル変数
 */
// 画面サイズ
var SCREEN_WIDTH	= 320;
var SCREEN_HEIGHT	= 320;
// スプライトファイル
var MAP_TILES		= 'images/map1.png';
var TANK_IMAGE		= 'images/chara3.png';
var MASSAGE_IMAGE	= 'images/msl.png'
var BULLET_IMAGE	= 'images/icon0.png';
var EXPLOSION_IMAGE	= 'images/effect0.png';
var CLEAR_IMAGE		= 'images/clear.png';
var OVER_IMAGE		= 'images/end.png';
// タイムリミット
var TIME_LIMIT		= 90;
// 自戦車のライフ
var PLAYER_LIFE		= 3; // 1～9
// ステージ番号
var STAGE 			= 1; // 1～7

window.onload = function() {
	game = new Game(SCREEN_WIDTH, SCREEN_HEIGHT);
	game.fps = 24;
	game.preload(MAP_TILES, TANK_IMAGE, BULLET_IMAGE, EXPLOSION_IMAGE, MASSAGE_IMAGE, CLEAR_IMAGE, OVER_IMAGE);
	game.keybind(32, 'a'); // SPACEキーをAキーとみなす // 自戦車の弾発射
	game.keybind( 8, 'b'); // BackSpaceキーをBキーとみなす // ハイスコア表示用隠しコマンド
	game.keybind(46, 'c'); // DeleteキーをCキーとみなす // ハイスコア初期化用隠しコマンド

	// ステージクリアしても受け継がれる情報
	game.score = 0; // スコア
	var PLAYER_DAMAGE = 0; // 自戦車のダメージ数

	game.onload = function() {
		/*
		 * タイトルシーン
		 */
		var TitleScene = new Scene();
		// TitleSceneをrootSceneに設定
		game.replaceScene(TitleScene);

		// マップの設置
		map = new Map(16, 16);
		map.image = game.assets[MAP_TILES];
		// 背景画面のマッピング
		map.loadData([
		[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
		[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
		[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
		[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
		[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
		[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
		[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
		[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
		[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
		[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
		[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
		[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
		[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
		[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
		[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
		[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
		[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
		[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
		[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
		[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65]]);
		TitleScene.addChild(map);

		// 自戦車オブジェクトの表示
		var tank = new Sprite(32, 32);
		tank.image = game.assets[TANK_IMAGE];
		tank.x = 1; tank.y = -8;
		tank.pattern = 0;
		tank.direction = 2;
		TitleScene.addChild(tank);
		// 自戦車オブジェクトの移動
		tank.addEventListener('enterframe', function () {
			// 上端
			if(tank.y <= -8){
				tank.direction = 2;
				tank.x += 1;
			}
			// 右端
			if(tank.x >= 294){
				tank.direction = 0;
				tank.y += 1;
			}
			// 下端
			if(tank.y >= 290){
				tank.direction = 1;
				tank.x -= 1;
			}
			// 左端
			if(tank.x <= -6){
				tank.direction = 3;
				tank.y -= 1;
			}
			tank.pattern = (tank.pattern + 1) % 3;
			tank.frame = tank.direction * 6 + tank.pattern;
		});

		// タイトルテキストの表示
		var title_label = new MutableText(75, 80);
		title_label.text = 'TANK BATTLE';
		title_label.scaleX = 1.5; title_label.scaleY = 1.5;
		TitleScene.addChild(title_label);

		// スタートボタンの表示
		var start_btn = new Button('START', 'dark', 24, 60);
		start_btn.x = 120; start_btn.y = 132.3;
		start_btn.addEventListener("touchend", function() {
			// ゲーム呼び出しシーンに遷移
			game.replaceScene(callGameScene);
		});
		TitleScene.addChild(start_btn);

		// 遊び方ボタンの表示
		var detail_btn = new Button('HOW TO PLAY', 'dark', 24, 90);
		detail_btn.x = 105; detail_btn.y = 210;
		detail_btn.addEventListener("touchend", function() {
			// 遊び方表示シーンの表示
			game.pushScene(DetailScene);
		});
		TitleScene.addChild(detail_btn);

		/*
		 * 遊び方表示シーン
		 */
		var DetailScene = new Scene();

		// メッセージウィンドウの表示
		var ms_img = new Sprite(320, 160);
		ms_img.image = game.assets[MASSAGE_IMAGE];
		ms_img.y = 80;
		ms_img.scaleX = 0.95; ms_img.scaleY = 1.75;
		DetailScene.addChild(ms_img);

		// メッセージの表示
		var ms_text = new Label();
		ms_text.color = "white";
		ms_text.x = 20; ms_text.y = 35;
		ms_text.text =
		'ミッション：<br>　デザートカラーの敵戦車を破壊し，<br>　　　　　より高いのスコアを獲得せよ！<br> <br>操作方法：<br>　＜キーボード＞<br>　　十字キー　　　戦車の移動<br>　　スペースキー　弾発射<br>　＜モバイル＞<br>　　十字パッド　　戦車の移動<br>　　画面タップ　　弾発射<br> <br>獲得スコア：<br>　敵戦車　5,　強敵戦車　20,<br>　残り時間　1/秒,　残りライフ　50/体<br> <br>　　　　　　 Tap here to close';
		DetailScene.addChild(ms_text);

		// 開発者向け隠しコマンド
		DetailScene.addEventListener('enterframe', function () {
			// ステージをクリア後としハイスコアを表示
			if(game.input.b){
				STAGE = 8;
				console.log('Done : High score will be shown');
			}
			// ハイスコア（JSON）の初期化
			if(game.input.c){
				resetHighScore();
				console.log('Done : High score reset');
			}
		});

		DetailScene.addEventListener("touchend", function() {
			// 遊び方表示シーンの非表示化
			game.popScene(DetailScene);
		});

		/*
		 * ゲーム呼び出しシーン
		 */
		var callGameScene = new Scene();

		callGameScene.backgroundColor = 'rgb(  0, 0, 0)';

		// ステージごとにラベルの表示
		var stage_label = new MutableText(105, 150);
		stage_label.scaleX = 1.5; title_label.scaleY = 1.5;
		callGameScene.addChild(stage_label);

		// ハイスコアラベルの表示
		var hs_label = new Label();
		hs_label.color = "white";
		hs_label.x = 30; hs_label.y = 150;
		var hs_flg = false; // ハイスコアを1回のみ更新

		callGameScene.addEventListener('enterframe', function () {
			if(STAGE == 1){
				stage_label.y = 150;
				stage_label.text = 'STAGE I';
			} else if(STAGE == 2){
				stage_label.text = 'STAGE II';
			} else if(STAGE == 3){
				stage_label.x = 95;
				stage_label.text = 'STAGE III';
			} else if(STAGE == 4){
				stage_label.x = 105;
				stage_label.text = 'STAGE IV';
			} else if(STAGE == 5){
				stage_label.text = 'STAGE V';
			} else if(STAGE == 6){
				stage_label.text = 'STAGE VI';
			} else if(STAGE == 7){
				stage_label.x = 80;
				stage_label.text = 'FINALSTAGE';
			} else{
				stage_label.x = 80;
				stage_label.y = 100;
				stage_label.text = 'GAME CLEAR!';

				// ハイスコアの表示
				if(hs_flg == false){
					var hs_table = callHighScore(game.score);
					hs_label.text =
					'No.1   Score : ' + hs_table[0].score + ' (at ' + hs_table[0].date + ')<br> <br>No.2   Score : ' + hs_table[1].score + ' (at ' + hs_table[1].date + ')<br> <br>No.3   Score : ' + hs_table[2].score + ' (at ' + hs_table[2].date + ')';
					callGameScene.addChild(hs_label);

					hs_flg = true;
				}
			}
		});

		callGameScene.addEventListener("touchend", function() {
			hs_flg = false;

			if(STAGE == 8){
				STAGE = 1
				PLAYER_DAMAGE = 0;
				game.score = 0;
				callGameScene.removeChild(hs_label);
				game.replaceScene(TitleScene);

				// 9leap.net用最適化
				game.end(game.score, 'Your Score is ' + game.score);
			} else{
				game.replaceScene(createGameScene());
			}
		});

		/*
		 * ゲームシーン
		 */
		// 呼び出し時に再設定するように関数化
		var createGameScene = function(){
			GameScene = new Scene();

			// マップの設置
			map = new Map(16, 16);
			map.image = game.assets[MAP_TILES];
			// 背景画面のマッピング // [最背面],[障害物],[障害物判定]
			// ステージ1
			if(STAGE == 1){
				var ENEMY_AMOUNT = 1; // 敵戦車数

				map.loadData([
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65]]);
				// 障害物判定のマッピング
				map.collisionData = [
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]];
			// ステージ2
			} else if(STAGE == 2){
				var ENEMY_AMOUNT = 1; // 敵戦車数

				map.loadData([
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65]],
			   [[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 23, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, 23, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]);
				// 障害物判定のマッピング
				map.collisionData = [
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]];
			// ステージ3
			} else if(STAGE == 3){
				var ENEMY_AMOUNT = 3; // 敵戦車数

				map.loadData([
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65]],
			   [[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, -1, -1, -1, -1],
				[ -1, -1, -1, -1, 23, 23, 23, 23, 23,  7,  7, 23, 23, 23, 23, 23, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]);
				// 障害物判定のマッピング
				map.collisionData = [
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0],
				[  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0],
				[  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]];
			// ステージ4
			} else if(STAGE == 4){
				var ENEMY_AMOUNT = 1; // 敵戦車数

				map.loadData([
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65]],
			   [[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 23, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, 23, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]);
				// 障害物判定のマッピング
				map.collisionData = [
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]];
			// ステージ5
			} else if(STAGE == 5){
				var ENEMY_AMOUNT = 5; // 敵戦車数

				map.loadData([
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65]],
			   [[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1],
				[ -1, -1, -1, -1, 23, 23, -1, -1, -1, -1, -1, -1, -1, -1, 23, 23, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]);
				// 障害物判定のマッピング
				map.collisionData = [
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0],
				[  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0],
				[  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]];
			// ステージ6
			} else if(STAGE == 6){
				var ENEMY_AMOUNT = 3; // 敵戦車数

				map.loadData([
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65]],
			   [[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1],
				[ -1, -1, -1,  7,  7,  7,  7, -1, -1, -1, -1, -1, -1,  7,  7,  7,  7, -1, -1, -1],
				[ -1, -1, -1, 23, 23, 23, 23, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1,  7,  7,  7,  7, -1, -1, -1, -1, -1, -1,  7,  7,  7,  7, -1, -1, -1],
				[ -1, -1, -1, 23, 23,  7,  7, -1, -1, -1, -1, -1, -1,  7,  7, 23, 23, -1, -1, -1],
				[ -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1, -1,  7,  7, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, 23, 23, -1, -1, -1, -1, -1, -1, 23, 23, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]);
				// 障害物判定のマッピング
				map.collisionData = [
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0],
				[  0,  0,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  0,  0,  0],
				[  0,  0,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  0,  0,  0],
				[  0,  0,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  1,  1,  1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  0,  0,  0],
				[  0,  0,  1,  1,  1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  0,  0,  0],
				[  0,  0,  1,  1,  1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  0,  0,  0],
				[  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  1,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  1,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]];
			// ファイナルステージ
			} else {
				var ENEMY_AMOUNT = 2; // 敵戦車数

				map.loadData([
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65],
				[ 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65]],
			   [[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1,  7,  7,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1,  7,  7,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1,  7,  7,  7,  7, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
				[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]);
				// 障害物判定のマッピング
				map.collisionData = [
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
				[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]];
			}
			GameScene.addChild(map);

			// 敵戦車の設置
			var enemies = new Array();
			var enemycnt = ENEMY_AMOUNT; // 敵戦車残数
			for(i=0; i < ENEMY_AMOUNT; i++){
				// 敵戦車を重畳しないように表示
				var enemiesClone = deployEnemy(enemies);
				enemies[i] = new Enemy(enemiesClone.x, enemiesClone.y);

				enemies[i].addEventListener('enterframe', function () {
					// 自弾が敵戦車に衝突したとき
					Enemy.intersect(PlayerShot).forEach(function(pair){
						// 強敵戦車のダメージカウントアップ
 						if(STAGE == 4 && pair[0] == enemies[0] && dmgcnt[0] < 9){
 							dmgcnt[0]++;
							GameScene.removeChild(pair[1]); //pair[1]: PlayerShotのインスタンス
						} else if(STAGE == 6 && pair[0] == enemies[0] && dmgcnt[0] < 9){
							dmgcnt[0]++;
							GameScene.removeChild(pair[1]); //pair[1]: PlayerShotのインスタンス
						} else if(STAGE == 7 && pair[0] == enemies[0] && dmgcnt[0] < 9){
							dmgcnt[0]++;
							GameScene.removeChild(pair[1]); //pair[1]: PlayerShotのインスタンス
						} else if(STAGE == 7 && pair[0] == enemies[1] && dmgcnt[1] < 9){
							dmgcnt[1]++;
							GameScene.removeChild(pair[1]); //pair[1]: PlayerShotのインスタンス
						// 強敵戦車の破壊と特別スコア
						} else if(STAGE == 4 && pair[0] == enemies[0]){
							GameScene.removeChild(pair[0]); //pair[0]: Enemyのインスタンス
							GameScene.removeChild(pair[1]); //pair[1]: PlayerShotのインスタンス
							explosion(pair[0].x, pair[0].y);
							game.score += 20;
							enemycnt--;
						} else if(STAGE == 6 && pair[0] == enemies[0]){
							GameScene.removeChild(pair[0]); //pair[0]: Enemyのインスタンス
							GameScene.removeChild(pair[1]); //pair[1]: PlayerShotのインスタンス
							explosion(pair[0].x, pair[0].y);
							game.score += 20;
							enemycnt--;
						} else if(STAGE == 7 && (pair[0] == enemies[0] || pair[0] == enemies[1])){
							GameScene.removeChild(pair[0]); //pair[0]: Enemyのインスタンス
							GameScene.removeChild(pair[1]); //pair[1]: PlayerShotのインスタンス
							explosion(pair[0].x, pair[0].y);
							game.score += 20;
							enemycnt--;
						// 一般敵戦車
						} else{
							GameScene.removeChild(pair[0]); //pair[0]: Enemyのインスタンス
							GameScene.removeChild(pair[1]); //pair[1]: PlayerShotのインスタンス
							explosion(pair[0].x, pair[0].y);
							game.score += 5;
							enemycnt--;
						}
					});

					// 全敵戦車を破壊したとき実行
					if(enemycnt == 0){
						GAMECLEAR_FLAG = true;
					}
				});
			}

			// 強敵戦車の設置
			if(STAGE == 4){
				enemies[0].scaleX = 1.3; enemies[0].scaleY = 1.3;
			} else if(STAGE == 6){
				enemies[0].scaleX = 1.3; enemies[0].scaleY = 1.3;
			} else if(STAGE == 7){
				enemies[0].scaleX = 1.3; enemies[0].scaleY = 1.3;
				enemies[1].scaleX = 1.3; enemies[1].scaleY = 1.3;
			}
			var dmgcnt = new Array(0, 0, 0); // 強敵戦車のダメージ数

			// タイマ最適化フラグ
			var newPlyFlg = true; // 自戦車の新規作成フラグ
			var CngableFlg = false; // ステージ遷移用フラグ

			// ゲームフレームごとに実行
			GameScene.addEventListener('enterframe', function () {
				// 自戦車の設置
				if(newPlyFlg == true && !GAMEOVER_FLAG){
					var player = new Player(32, 32);
					newPlyFlg = false;
				}
				this.addEventListener('enterframe', function () {
					// 自戦車が敵弾に衝突したとき
					Player.intersect(EnemyShot).forEach(function(pair){
						GameScene.removeChild(pair[0]); //pair[0]: Playerのインスタンス
						GameScene.removeChild(pair[1]); //pair[1]: EnemyShotのインスタンス
						explosion(pair[0].x, pair[0].y);
						PLAYER_DAMAGE++;

						// 2.5後自戦車を再表示するフラグを立てる
						var i = 0;
						if(PLAYER_LIFE - PLAYER_DAMAGE > 0){
							var PlyFlg = function(){
								newPlyFlg = true;
							}
							setTimeout(PlyFlg, 2500);
						} else{
							GAMEOVER_FLAG = true;
						}
					});
					// 自戦車が敵戦車に衝突したとき
					Player.intersect(Enemy).forEach(function(pair){
						GameScene.removeChild(pair[0]); //pair[0]: Playerのインスタンス
						explosion(pair[0].x, pair[0].y);
						PLAYER_DAMAGE++;

						// 2.5秒後自戦車再表示するフラグを立てる
						var i = 0;
						if(PLAYER_LIFE - PLAYER_DAMAGE > 0){
							var PlyFlg = function(){
								newPlyFlg = true;
							}
							setTimeout(PlyFlg, 2500);
						} else{
							GAMEOVER_FLAG = true;
						}
					});
					// 自弾が敵弾に衝突したとき
					PlayerShot.intersect(EnemyShot).forEach(function(pair){
						GameScene.removeChild(pair[0]); //pair[0]: PlayerShotのインスタンス
						GameScene.removeChild(pair[1]); //pair[1]: EnemyShotのインスタンス
					});
				});

				// スコア・ライフ・タイム表示
				scoreLabel.score = game.score;
				lifeLabel.life = PLAYER_LIFE - PLAYER_DAMAGE;
				if(TIME_LIMIT - timeLabel.time < 1 && !GAMECLEAR_FLAG) GAMEOVER_FLAG = true;

				// ゲームクリア処理
				if(GAMECLEAR_FLAG){
					// ゲームクリアイメージの表示
					var clear = new Sprite(267, 48);
					clear.image = game.assets[CLEAR_IMAGE];
					clear.x = (SCREEN_WIDTH - clear.width) / 2; clear.y = (SCREEN_HEIGHT - clear.height) / 2;
					GameScene.addChild(clear);

					// タイムの停止
					if(!timeStopFlg){
						timeStopped = TIME_LIMIT - timeLabel.time;
						timeStopFlg = true;
					}
					timeLabel.text = 'TIME:' + timeStopped;

					// 3秒後タイムをスコアに換算
					var TimToScr = function(){
						while(timeStopped > 0){
							game.score++;
							timeStopped--;
						}
					}
					setTimeout(TimToScr, 3000);

					// 5秒後ステージをカウントアップしステージ遷移
					var CngStg = function(){
						if(!CngableFlg){
							STAGE++;
							// ライフをスコアに換算
							if(STAGE == 8){
								game.score += (PLAYER_LIFE - PLAYER_DAMAGE) * 50;
							}
							removeChildren(GameScene);
							game.replaceScene(callGameScene);

							CngableFlg = true;
						}
					}
					setTimeout(CngStg, 5000);
				}

				// ゲームオーバー処理
				if(GAMEOVER_FLAG){
					// ゲームオーバーイメージの表示
					var over = new Sprite(189, 97);
					over.image = game.assets[OVER_IMAGE];
					over.x = (SCREEN_WIDTH - over.width) / 2; over.y = (SCREEN_HEIGHT - over.height) / 2;
					GameScene.addChild(over);

					// タイムの停止
					if(!timeStopFlg){
						timeStopped = TIME_LIMIT - timeLabel.time;
						timeStopFlg = true;
					}
					timeLabel.text = 'TIME:' + timeStopped;

					// ステージ番号，ダメージ数，スコアを初期化し遷移
					GameScene.addEventListener('touchend', function() {
						STAGE = 1
						PLAYER_DAMAGE = 0;;
						game.score = 0;
						removeChildren(GameScene);
						game.replaceScene(TitleScene);

						// 9leap.net用最適化
						game.end(game.score, 'Your Score is ' + game.score);
					});
				}
			}); // GameSceneフレームイベントの終了

			// スコア表示
			scoreLabel = new ScoreLabel(8, 8);
			GameScene.addChild(scoreLabel);

			// ライフ表示
			lifeLabel = new LifeLabel(185, 300, PLAYER_LIFE);
			GameScene.addChild(lifeLabel);

			// タイム表示
			var timeStopped = 0; // タイム停止時保存用変数の初期化
			var timeStopFlg = false; // タイム停止用フラグの初期化
			timeLabel = new TimeLabel(200, 8, TIME_LIMIT);
			GameScene.addChild(timeLabel);

			GAMECLEAR_FLAG = false; // ゲームクリアフラグ
			GAMEOVER_FLAG = false; // ゲームオーバーフラグ

			// 十字パッドの設置
			var pad = new Pad();
			pad.x = 0; pad.y = 220;
			GameScene.addChild(pad);

			// 画面タップ監視
			isTap = false;
			GameScene.addEventListener("touchstart", function(e) { isTap = true; });
			GameScene.addEventListener("touchend",   function(e) { isTap = false; });

			return GameScene;
		} // createGameScene関数の終了
	}; // game.onload関数の終了
	game.start();
}; //window.onload関数の終了

/*
 * 戦車クラス
 */
var Tank = Class.create(Sprite, {
	initialize: function(x, y){
		Sprite.call(this, 32, 32);
		this.image = game.assets[TANK_IMAGE];
		this.x = x; this.y = y;
		this.pattern = 0;
		this.isMoving = false;
		GameScene.addChild(this);
	}
});

/*
 * 戦車クラスを継承する自戦車クラス
 */
var Player = Class.create(Tank, {
	initialize: function(x, y){
		Tank.call(this, x, y);
		this.direction = 2; // 右向
		this.frame = 12; // 緑色の戦車スプライト

		ShottedFlg = false; // 弾の連続発射回避フラグ
	},
	onenterframe: function() {
		// 自戦車の入力操作・移動計算
		if (this.isMoving == false) {
			// 移動方向を初期化
			this.vx = this.vy = 0;

			// 入力の監視 // direction 0:下、1:左、2:右、3:上
			// 左方向
			if (game.input.left) {
				this.direction = 1;
				this.vx = -0.08;
			// 右方向
			} else if (game.input.right) {
				this.direction = 2;
				this.vx = 0.08;
			// 上方向
			} else if (game.input.up) {
				this.direction = 3;
				this.vy = -0.08;
			// 下方向
			} else if (game.input.down) {
				this.direction = 0;
				this.vy = 0.08;
			// 弾発射
			} else if ((game.input.a || isTap) && !GAMECLEAR_FLAG && !GAMEOVER_FLAG && !ShottedFlg) {
				var shot = new PlayerShot(this.x+((32-16)/2), this.y+((32-16)/2), this.direction);
				game.currentScene.addChild(shot);
				// 弾を戦車の後ろに表示
				game.currentScene.insertBefore(shot, this);

				ShottedFlg = true;
			} else if(!game.input.a && !isTap){
				ShottedFlg = false;
			}

			// 移動計算
			if (this.vx || this.vy) {
				// 移動後の座標を計算
				var x = this.x + this.vx * 32;
				var y = this.y + this.vy * 32;
				if (0 <= x && x < SCREEN_WIDTH - 32 && 0 <= y && y < SCREEN_HEIGHT - 32 && !map.hitTest2(x, y,16, 16) && !GAMECLEAR_FLAG && !GAMEOVER_FLAG) {
					this.isMoving = true;
					// TIMELINE関数
					this.tl
						.moveTo(x, y, 1, enchant.Easing.LINEAR)
						.and()
						.repeat(function() {
							// フレームの選択 // 4方向，3パターンのうちどのフレームを使うか
							this.pattern = (this.pattern + 1) % 3;
							this.frame = this.direction * 6 + this.pattern;
						}, 1);
					this.isMoving = false;
				}
			}
		}
	}
});

/*
 * 戦車クラスを継承する敵戦車クラス
 */
var Enemy = Class.create(Tank, {
	initialize: function(x, y){
		Tank.call(this, x, y);
		this.direction = 1; // 左向
		this.frame = 9; // 土色の戦車スプライト
	},
	// 敵戦車の乱数操作・移動計算
	onenterframe: function() {
		if (this.isMoving == false) {
			// 移動方向を初期化
			this.vx = this.vy = 0;

			// 3フレームごと45分の1の確率で実行 // direction 0:下、1:左、2:右、3:上
			// 左方向
			if (this.age % 3 == 0 && rand(0, 44) == 0) {
				this.direction = 1;
				this.vx = -0.5;
			// 右方向
			} else if (this.age % 3 == 0 && rand(0, 44) == 0) {
				this.direction = 2;
				this.vx = 0.5;
			// 上方向
			} else if (this.age % 3 == 0 && rand(0, 44) == 0) {
				this.direction = 3;
				this.vy = -0.5;
			// 下方向
			} else if (this.age % 3 == 0 && rand(0, 44) == 0) {
				this.direction = 0;
				this.vy = 0.5;
			// 30分の1の確率で実行
			} else if(rand(0, 29) == 0){
				var shot = new EnemyShot(this.x+((32-16)/2), this.y+((32-16)/2), this.direction);
				game.currentScene.addChild(shot);
				// 弾を戦車の後ろに表示
				game.currentScene.insertBefore(shot, this);
			}

			// 移動計算
			if (this.vx || this.vy) {
				// 移動後の座標を計算
				var x = this.x + this.vx * 32;
				var y = this.y + this.vy * 32;
				if (0 <= x && x < SCREEN_WIDTH - 32 && 0 <= y && y < SCREEN_HEIGHT - 32 && !map.hitTest2(x, y, 16, 16)) {
					this.isMoving = true;
					// Timeline関数
					this.tl
						.moveTo(x, y, 4, enchant.Easing.LINEAR)
						.and()
						.repeat(function() {
							// フレームの選択 // 4方向，3パターンのうちどのフレームを使うか
							this.pattern = ((this.pattern + 1) % 3) + 3;
							this.frame = this.direction * 6 + this.pattern;
						}, 4)
					this.isMoving = false;
				}
			}
		}
	}
});

/*
 * 弾発射クラス
 */
var Shot = Class.create(Sprite, {
	initialize: function(x, y, direction, topFrame){
		Sprite.call(this, 16, 16);
		this.image = game.assets[BULLET_IMAGE];
		this.x = x;
		this.y = y;

		// direction 0:下、1:左、2:右、3:下
		this.vx = this.vy = 0;
		if (direction == 0) {
			this.frame = topFrame + 4;
			this.vy = 1;
		} else if (direction == 1) {
			this.frame = topFrame + 2;
			this.vx = -1;
		} else if (direction == 2) {
			this.frame = topFrame + 6;
			this.vx = 1;
		} else if (direction == 3) {
			this.frame = topFrame;
			this.vy = -1;
		}

		// 移動計算
		this.addEventListener('enterframe', function() {
			if (this.vx || this.vy) {
				// 画面内
				if (0 <= this.x && this.x < SCREEN_WIDTH && 0 <= this.y && this.y < SCREEN_HEIGHT && !map.hitTest(this.x + this.vx, this.y + this.vy, 16, 16)) {
					this.moveBy(this.vx * 5, this.vy * 5);
				// 画面外
				} else if(map.hitTest(this.x + this.vx, this.y + this.vy, 16, 16)){
					this.remove();
				} else{
					game.currentScene.removeChild(this);
				}
			}
		});
	}
});

/*
 * 弾発射クラスを継承する自弾
 */
var PlayerShot = Class.create(Shot, {
	initialize: function (x, y, direction) {
		Shot.call(this, x, y, direction, 48);
	}
});

/*
 * 弾発射クラスを継承する敵弾
 */
var EnemyShot = Class.create(Shot, {
	initialize: function (x, y, direction) {
		Shot.call(this, x, y, direction, 56);
	}
});

/*
 * ハイスコアの取得・記録
 */
function callHighScore(score){
	// LocalStorageが空の時は初期化
	if(localStorage.getItem('Key') == null){
		resetHighScore();
	}
	// 現在のハイスコアを取得
	var jsonHS = localStorage.getItem('Key');
	var HighScores = JSON.parse(jsonHS);

	// 記録時の西暦月日時間を取得
	var preDate = new Date();
	var year = preDate.getFullYear();
	var month = preDate.getMonth() + 1; // getMonth()は実際の値より1小さい値が返ってくる
	var day = preDate.getDate();
	var hour = preDate.getHours();
	var minute = preDate.getMinutes();

	// 1位のとき
	if(score > HighScores[0].score){
		// 3位←2位
		HighScores[2].score = HighScores[1].score;
		HighScores[2].date = HighScores[1].date;
		// 2位←1位
		HighScores[1].score = HighScores[0].score;
		HighScores[1].date = HighScores[0].date;
		// 1位←今回のスコア
		HighScores[0].score = score;
		HighScores[0].date = year + '/' + month + '/' + day + ' ' + hour + ':' + minute;
	// 2位のとき
	} else if(score > HighScores[1].score){
		// 3位←2位
		HighScores[2].score = HighScores[1].score;
		HighScores[2].date = HighScores[1].date;
		// 2位←今回のスコア
		HighScores[1].score = score;
		HighScores[1].date = year + '/' + month + '/' + day + ' ' + hour + ':' + minute;
	// 3位のとき
	} else if(score > HighScores[2].score){
		// 3位←今回のスコア
		HighScores[2].score = score;
		HighScores[2].date = year + '/' + month + '/' + day + ' ' + hour + ':' + minute;
	}

	// ハイスコアを記録
	jsonHS = JSON.stringify(HighScores);
	localStorage.setItem('Key', jsonHS);

	return HighScores;
}

/*
 * ハイスコアの初期化
 */
function resetHighScore(){
	var HighScores = [
	{
		score : 0,
		date : '2000/1/1 0:0'
	},
	{
		score : 0,
		date : '2000/1/1 0:0'
	},
	{
		score : 0,
		date : '2000/1/1 0:0'
	}];

	// ハイスコアを記録
	var jsonHS = JSON.stringify(HighScores);
	localStorage.setItem('Key', jsonHS);
}

/*
 * シーンの全子要素を削除する関数
 */
function removeChildren(scene){
    while(scene.firstChild){
        scene.removeChild(scene.firstChild);
    }
}

/*
 * 敵戦車の重畳表示回避用関数
 */
function deployEnemy(enemyList){
	var range = 32; // 敵戦車間の距離
	var flg = false;
	var enemiesClone = new Sprite(32, 32);

	if(STAGE == 3 || STAGE == 7){
		// 右下
		if(rand(0, 2) == 0){
			enemiesClone.x = rand(175, 280); enemiesClone.y = rand(180, 280);
		// 左下
		} else if(rand(0, 1) == 0){
			enemiesClone.x = rand(50, 110); enemiesClone.y = rand(180, 280);
		// 右上
		} else{
			enemiesClone.x = rand(175, 280); enemiesClone.y = rand(10, 100);
		}
	} else if(STAGE == 5){
		// 右下
		if(rand(0, 3) == 0){
			enemiesClone.x = rand(175, 280); enemiesClone.y = rand(180, 280);
		// 左下
		} else if(rand(0, 3) == 0){
			enemiesClone.x = rand(10, 110); enemiesClone.y = rand(180, 280);
		// 右上
		} else if(rand(0, 2) == 0){
			enemiesClone.x = rand(175, 280); enemiesClone.y = rand(10, 100);
		// 真中
		} else{
			enemiesClone.x = rand(95, 190); enemiesClone.y = rand(90, 195);
		}
	} else if(STAGE == 6){
		// 右下
		if(rand(0, 2) == 0){
			enemiesClone.x = rand(245, 280); enemiesClone.y = rand(220, 280);
		// 左下
		} else if(rand(0, 1) == 0){
			enemiesClone.x = rand(30, 40); enemiesClone.y = rand(220, 280);
		// 右上
		} else{
			enemiesClone.x = rand(245, 280); enemiesClone.y = rand(30, 60);
		}
	} else {
		// 右下
		enemiesClone.x = rand(175, 280); enemiesClone.y = rand(180, 280);
	}

	flg = enemyList.some(function(value){
		 return (value.x - range < enemiesClone.x && enemiesClone.x < value.x + range && value.y - range < enemiesClone.y && enemiesClone.y < value.y + range);
	});

	if(flg) enemiesClone = deployEnemy(enemyList);
	return enemiesClone;
}

/*
 * 爆発エフェクトの表示関数
 */
function explosion(x, y){
	var explosion = new Sprite(16, 16);
	explosion.image = game.assets[EXPLOSION_IMAGE];
	explosion.x = x + 8; explosion.y = y + 8;
	explosion.scaleX = 2; explosion.scaleY = 2;
	explosion.frame = 0;
	explosion.addEventListener('enterframe', function() {
		if(this.age % 3 == 0){
			if(this.frame < 4) explosion.frame++;
			else explosion.remove();
		}
	});
	game.currentScene.addChild(explosion);
}

/*
 * i～j 値の間で乱数を返す関数
 */
function rand(i, j){
    return (Math.floor(Math.random() * (j - i + 1) + i))
}

/***********************開発メモ**********************
 *方針
 *[1]緑色の自戦車を十字キー+SPACEキー（または十字パッド+画面タップ）で操作し，土色の敵戦車を破壊する．
 *[2]ステージ追加に際して追記が必要となる箇所(1)map,(2)callGameScene,(3)強敵戦車,(4)deployEnemy関数
 *
 *構造
 *プロジェクトディレクトリ
 *	－images
 *		－chara3.png
 *		－clear.png
 *		－effect0.png
 *		－end.png
 *		－font0.png
 *		－icon0.png
 *		－pad.png
 *		－start.png
 *	－plugins
 *		－enchant.js
 *		－nineleap.enchant.js
 *      －TANK_BATTLE.js
 *		－ui.enchant.js
 *	－TANK_BATTLE.html
 *
 *参考
 *[1]クラスインデックス http://wise9.github.io/enchant.js/doc/core/ja/symbols/enchant.Core.html
 *[2]プラグイン http://enchantjs.com/ja/resource-ja/plugins/
 *[3]hitMap判定の修正 http://grc.jugem.jp/?eid=73
 *
 *2018年10月23日最終更新
 *****************************************************/
